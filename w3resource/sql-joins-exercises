1-From the following tables write a SQL query to find the salesperson and customer who reside in the same city. Return Salesman, cust_name and city
Resposta:
SELECT salesman.name,customer.cust_name,customer.city
FROM salesman
INNER JOIN customer
ON salesman.city=customer.city
------------------------------------------------------
2-From the following tables write a SQL query to find those orders where the order amount exists between 500 and 2000. Return ord_no, purch_amt, cust_name, city. 
Resposta:
SELECT 
orders.ord_no,orders.purch_amt,customer.cust_name,
customer.city
FROM orders
INNER JOIN customer
ON purch_amt BETWEEN 500 AND 2000 AND customer.customer_id=orders.customer_id
------------------------------------------------------
3-From the following tables write a SQL query to find the salesperson(s) and the customer(s) he represents. Return Customer Name, city, Salesman, commission. 
Resposta:
SELECT 
customer.cust_name,customer.city,
salesman.name,salesman.commission
FROM customer
INNER JOIN salesman
ON customer.salesman_id=salesman.salesman_id
------------------------------------------------------
4-From the following tables write a SQL query to find salespeople who received commissions of more than 12 percent from the company. Return Customer Name, customer city, Salesman, commission.
Resposta:
SELECT 
customer.cust_name,customer.city,
salesman.name,salesman.commission
FROM customer
INNER JOIN salesman
ON customer.salesman_id=salesman.salesman_id
AND salesman.commission>0.12
------------------------------------------------------
5-From the following tables write a SQL query to locate those salespeople who do not live in the same city where their customers live and have received a commission of more than 12% from the company. Return Customer Name, customer city, Salesman, salesman city, commission. 
Resposta:
SELECT 
customer.cust_name,customer.city,
salesman.name,salesman.city,salesman.commission
FROM customer
INNER JOIN salesman
ON customer.salesman_id=salesman.salesman_id
AND salesman.commission>0.12 AND customer.city<>salesman.city
-----------------------------------------------------
6-From the following tables write a SQL query to find the details of an order. Return ord_no, ord_date, purch_amt, Customer Name, grade, Salesman, commission. 
Resposta:
SELECT 
orders.ord_no,orders.ord_date,orders.purch_amt,
customer.cust_name AS "Customer Name",customer.grade,
salesman.name AS "Salesman",salesman.commission
FROM orders
INNER JOIN customer
ON orders.customer_id=customer.customer_id
INNER JOIN salesman
ON orders.salesman_id=salesman.salesman_id
--------------------------------------------------
7-Write a SQL statement to join the tables salesman, customer and orders so that the same column of each table appears once and only the relational rows are returned. 
Resposta:
SELECT 
*
FROM Orders
NATURAL JOIN Customer
NATURAL JOIN Salesman
--------------------------------------------------
8-From the following tables write a SQL query to display the customer name, customer city, grade, salesman, salesman city. The results should be sorted by ascending customer_id.
Resposta:
SELECT c.cust_name AS "Customer name",c.grade,s.name AS "Salesman",s.city
FROM customer c
INNER JOIN salesman s 
ON c.salesman_id=s.salesman_id
ORDER BY c.customer_id ASC
-------------------------------------------------
9- From the following tables write a SQL query to find those customers with a grade less than 300. Return cust_name, customer city, grade, Salesman, salesmancity. The result should be ordered by ascending customer_id. 
Resposta:SELECT c.cust_name AS "Customer name",c.city,c.grade,s.name,s.city
FROM customer c
LEFT JOIN salesman s 
ON c.salesman_id=s.salesman_id
WHERE c.grade<300
ORDER BY c.customer_id ASC
------------------------------------------------
10-Write a SQL statement to make a report with customer name, city, order number, order date, and order amount in ascending order according to the order date to determine whether any of the existing customers have placed an order or not.
Resposta:
SELECT c.cust_name AS "Customer name",c.city,e.ord_no,e.ord_date,e.purch_amt
FROM customer c
INNER JOIN orders e 
ON c.customer_id=e.customer_id
ORDER BY e.ord_date ASC
-----------------------------------------------
15-For those customers from the existing list who put one or more orders, or which orders have been placed by the customer who is not on the list, create a report containing the customer name, city, order number, order date, and purchase amount Go to the editor
Resposta:
SELECT x.cust_name,x.city, y.ord_no, y.ord_date,y.purch_amt AS "Order Amount"
FROM customer x 
LEFT OUTER JOIN orders y 
ON x.customer_id=y.customer_id;
------------------------------------------------
16- Write a SQL statement to generate a report with the customer name, city, order no. order date, purchase amount for only those customers on the list who must have a grade and placed one or more orders or which order(s) have been placed by the customer who neither is on the list nor has a grade.
Resposta:
SELECT h.cust_name,h.city, e.ord_no,
e.ord_date,e.purch_amt AS "Order Amount" 
FROM customer h 
FULL OUTER JOIN orders e 
ON h.customer_id=e.customer_id 
WHERE h.grade IS NOT NULL;
